/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LiveRouteImport } from './routes/live'
import { Route as AuthRequiredRouteImport } from './routes/_auth-required'
import { Route as R404RouteImport } from './routes/404'
import { Route as PlantRouteRouteImport } from './routes/plant/route'
import { Route as CommunityRouteRouteImport } from './routes/community/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PlantIndexRouteImport } from './routes/plant/index'
import { Route as CommunityIndexRouteImport } from './routes/community/index'
import { Route as PlantIdRouteImport } from './routes/plant/$id'
import { Route as CommunityWriteRouteImport } from './routes/community/write'
import { Route as CommunityIdRouteImport } from './routes/community/$id'
import { Route as AuthSignUpRouteImport } from './routes/auth/sign-up'
import { Route as AuthSignInRouteImport } from './routes/auth/sign-in'
import { Route as AuthRequiredDashboardRouteImport } from './routes/_auth-required/dashboard'

const LiveRoute = LiveRouteImport.update({
  id: '/live',
  path: '/live',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRequiredRoute = AuthRequiredRouteImport.update({
  id: '/_auth-required',
  getParentRoute: () => rootRouteImport,
} as any)
const R404Route = R404RouteImport.update({
  id: '/404',
  path: '/404',
  getParentRoute: () => rootRouteImport,
} as any)
const PlantRouteRoute = PlantRouteRouteImport.update({
  id: '/plant',
  path: '/plant',
  getParentRoute: () => rootRouteImport,
} as any)
const CommunityRouteRoute = CommunityRouteRouteImport.update({
  id: '/community',
  path: '/community',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlantIndexRoute = PlantIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PlantRouteRoute,
} as any)
const CommunityIndexRoute = CommunityIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CommunityRouteRoute,
} as any)
const PlantIdRoute = PlantIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => PlantRouteRoute,
} as any)
const CommunityWriteRoute = CommunityWriteRouteImport.update({
  id: '/write',
  path: '/write',
  getParentRoute: () => CommunityRouteRoute,
} as any)
const CommunityIdRoute = CommunityIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => CommunityRouteRoute,
} as any)
const AuthSignUpRoute = AuthSignUpRouteImport.update({
  id: '/auth/sign-up',
  path: '/auth/sign-up',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignInRoute = AuthSignInRouteImport.update({
  id: '/auth/sign-in',
  path: '/auth/sign-in',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRequiredDashboardRoute = AuthRequiredDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthRequiredRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/community': typeof CommunityRouteRouteWithChildren
  '/plant': typeof PlantRouteRouteWithChildren
  '/404': typeof R404Route
  '/live': typeof LiveRoute
  '/dashboard': typeof AuthRequiredDashboardRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/community/$id': typeof CommunityIdRoute
  '/community/write': typeof CommunityWriteRoute
  '/plant/$id': typeof PlantIdRoute
  '/community/': typeof CommunityIndexRoute
  '/plant/': typeof PlantIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/404': typeof R404Route
  '/live': typeof LiveRoute
  '/dashboard': typeof AuthRequiredDashboardRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/community/$id': typeof CommunityIdRoute
  '/community/write': typeof CommunityWriteRoute
  '/plant/$id': typeof PlantIdRoute
  '/community': typeof CommunityIndexRoute
  '/plant': typeof PlantIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/community': typeof CommunityRouteRouteWithChildren
  '/plant': typeof PlantRouteRouteWithChildren
  '/404': typeof R404Route
  '/_auth-required': typeof AuthRequiredRouteWithChildren
  '/live': typeof LiveRoute
  '/_auth-required/dashboard': typeof AuthRequiredDashboardRoute
  '/auth/sign-in': typeof AuthSignInRoute
  '/auth/sign-up': typeof AuthSignUpRoute
  '/community/$id': typeof CommunityIdRoute
  '/community/write': typeof CommunityWriteRoute
  '/plant/$id': typeof PlantIdRoute
  '/community/': typeof CommunityIndexRoute
  '/plant/': typeof PlantIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/community'
    | '/plant'
    | '/404'
    | '/live'
    | '/dashboard'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/community/$id'
    | '/community/write'
    | '/plant/$id'
    | '/community/'
    | '/plant/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/404'
    | '/live'
    | '/dashboard'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/community/$id'
    | '/community/write'
    | '/plant/$id'
    | '/community'
    | '/plant'
  id:
    | '__root__'
    | '/'
    | '/community'
    | '/plant'
    | '/404'
    | '/_auth-required'
    | '/live'
    | '/_auth-required/dashboard'
    | '/auth/sign-in'
    | '/auth/sign-up'
    | '/community/$id'
    | '/community/write'
    | '/plant/$id'
    | '/community/'
    | '/plant/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CommunityRouteRoute: typeof CommunityRouteRouteWithChildren
  PlantRouteRoute: typeof PlantRouteRouteWithChildren
  R404Route: typeof R404Route
  AuthRequiredRoute: typeof AuthRequiredRouteWithChildren
  LiveRoute: typeof LiveRoute
  AuthSignInRoute: typeof AuthSignInRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/live': {
      id: '/live'
      path: '/live'
      fullPath: '/live'
      preLoaderRoute: typeof LiveRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth-required': {
      id: '/_auth-required'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRequiredRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/404': {
      id: '/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof R404RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/plant': {
      id: '/plant'
      path: '/plant'
      fullPath: '/plant'
      preLoaderRoute: typeof PlantRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/community': {
      id: '/community'
      path: '/community'
      fullPath: '/community'
      preLoaderRoute: typeof CommunityRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/plant/': {
      id: '/plant/'
      path: '/'
      fullPath: '/plant/'
      preLoaderRoute: typeof PlantIndexRouteImport
      parentRoute: typeof PlantRouteRoute
    }
    '/community/': {
      id: '/community/'
      path: '/'
      fullPath: '/community/'
      preLoaderRoute: typeof CommunityIndexRouteImport
      parentRoute: typeof CommunityRouteRoute
    }
    '/plant/$id': {
      id: '/plant/$id'
      path: '/$id'
      fullPath: '/plant/$id'
      preLoaderRoute: typeof PlantIdRouteImport
      parentRoute: typeof PlantRouteRoute
    }
    '/community/write': {
      id: '/community/write'
      path: '/write'
      fullPath: '/community/write'
      preLoaderRoute: typeof CommunityWriteRouteImport
      parentRoute: typeof CommunityRouteRoute
    }
    '/community/$id': {
      id: '/community/$id'
      path: '/$id'
      fullPath: '/community/$id'
      preLoaderRoute: typeof CommunityIdRouteImport
      parentRoute: typeof CommunityRouteRoute
    }
    '/auth/sign-up': {
      id: '/auth/sign-up'
      path: '/auth/sign-up'
      fullPath: '/auth/sign-up'
      preLoaderRoute: typeof AuthSignUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/sign-in': {
      id: '/auth/sign-in'
      path: '/auth/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof AuthSignInRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth-required/dashboard': {
      id: '/_auth-required/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthRequiredDashboardRouteImport
      parentRoute: typeof AuthRequiredRoute
    }
  }
}

interface CommunityRouteRouteChildren {
  CommunityIdRoute: typeof CommunityIdRoute
  CommunityWriteRoute: typeof CommunityWriteRoute
  CommunityIndexRoute: typeof CommunityIndexRoute
}

const CommunityRouteRouteChildren: CommunityRouteRouteChildren = {
  CommunityIdRoute: CommunityIdRoute,
  CommunityWriteRoute: CommunityWriteRoute,
  CommunityIndexRoute: CommunityIndexRoute,
}

const CommunityRouteRouteWithChildren = CommunityRouteRoute._addFileChildren(
  CommunityRouteRouteChildren,
)

interface PlantRouteRouteChildren {
  PlantIdRoute: typeof PlantIdRoute
  PlantIndexRoute: typeof PlantIndexRoute
}

const PlantRouteRouteChildren: PlantRouteRouteChildren = {
  PlantIdRoute: PlantIdRoute,
  PlantIndexRoute: PlantIndexRoute,
}

const PlantRouteRouteWithChildren = PlantRouteRoute._addFileChildren(
  PlantRouteRouteChildren,
)

interface AuthRequiredRouteChildren {
  AuthRequiredDashboardRoute: typeof AuthRequiredDashboardRoute
}

const AuthRequiredRouteChildren: AuthRequiredRouteChildren = {
  AuthRequiredDashboardRoute: AuthRequiredDashboardRoute,
}

const AuthRequiredRouteWithChildren = AuthRequiredRoute._addFileChildren(
  AuthRequiredRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CommunityRouteRoute: CommunityRouteRouteWithChildren,
  PlantRouteRoute: PlantRouteRouteWithChildren,
  R404Route: R404Route,
  AuthRequiredRoute: AuthRequiredRouteWithChildren,
  LiveRoute: LiveRoute,
  AuthSignInRoute: AuthSignInRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
